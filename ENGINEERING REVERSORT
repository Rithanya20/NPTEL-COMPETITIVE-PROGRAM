/** 
Problem
Note: The main parts of the statements of the problems "Reversort" and "Reversort Engineering" are identical, except for the last paragraph. The problems can otherwise be solved independently.

Reversort is an algorithm to sort a list of distinct integers in increasing order. The algorithm is based on the "Reverse" operation. Each application of this operation reverses the order of some contiguous part of the list.

The pseudocode of the algorithm is the following:

Reversort(L):
  for i := 1 to length(L) - 1
    j := position with the minimum value in L between i and length(L), inclusive
    Reverse(L[i..j])
After i−1 iterations, the positions 1,2,…,i−1 of the list contain the i−1 smallest elements of L, in increasing order. During the i-th iteration, the process reverses the sublist going from the i-th position to the current position of the i-th minimum element. That makes the i-th minimum element end up in the i-th position.

For example, for a list with 4 elements, the algorithm would perform 3 iterations. Here is how it would process L=[4,2,1,3]:

i=1, j=3⟶L=[1,2,4,3]
i=2, j=2⟶L=[1,2,4,3]
i=3, j=4⟶L=[1,2,3,4]
The most expensive part of executing the algorithm on our architecture is the Reverse operation. Therefore, our measure for the cost of each iteration is simply the length of the sublist passed to Reverse, that is, the value j−i+1. The cost of the whole algorithm is the sum of the costs of each iteration.

In the example above, the iterations cost 3, 1, and 2, in that order, for a total of 6.

You are given a size N and a cost C. Find a list of N distinct integers between 1 and N such that the cost of applying Reversort to it is exactly C, or say that there is no such list.

Input
The first line of the input gives the number of test cases, T. T lines follow. Each line describes a test case with two integers N and C, the size of the wanted list and the desired cost, respectively.

Output
For each test case, if there is no list of size N such that applying Reversort to it costs exactly C, output one line containing Case #x: IMPOSSIBLE, where x is the test case number (starting from 1). Otherwise, output one line containing Case #x: y1 y2 ... yN, where x is the test case number (starting from 1) and each yi is a distinct integer between 1 and N, representing the i-th element of one such possible list.

If there are multiple solutions, you may output any one of them. (See "What if a test case has multiple correct solutions?" in the Competing section of the FAQ.) This information about multiple solutions will not be explicitly stated in the remainder of the 2021 contest.

Limits
Time limit: 10 seconds.
Memory limit: 1 GB.
1≤T≤100.
1≤C≤1000.
Test Set 1 (Visible Verdict)
2≤N≤7.
Test Set 2 (Visible Verdict)
2≤N≤100.
**/

def cost(a):
  n = len(a)
  ans = 0
  for j in range(n-1):
      x = min(a[j:])
      i = a.index(x)
      ans += (i - j) + 1
      a = a[:j] + a[j:i+1][::-1] + a[i+1:]
        
  return ans


def construct(N,C,M):
    # Construct an array with elements from M...N
    # which, when reversorted, incurs a cost of C.
    # Precondition: C is an attainable cost. 

    if(N == 1):
        # The base case is easy but important!
        return str(M)
    else:
        if((C-1) >= N-2 and (C-1) <= N*(N-1)/2 - 1):
            # If C-1 is within valid bounds for N-1,
            # Then place X at the beginning and recurse directly.
            # Note that the minimum increases to M+1 in recursion. 
            
            return str(M) + " " + construct(N-1,C-1,M+1)
        
        else:
            # If we are not in the "easy" case above,
            # then reduce C by as much as you need to to be
            # within valid bounds in recursion:
            delta = int(C - N*(N-1)/2 + 1)

            # Now recurse with the appropriately adjusted cost 
            # (i.e, C-delta) and updated minimum (M+1):
            y = construct(N-1, C - delta, M+1)

            # Sneak M to the array obtained from recursion:
            smallarr = y.split(" ")
            newarr = [str(M)]
            newarr.extend(smallarr)

            # Reverse the subarray upto delta so that the cost of
            # getting M in its correct place is exactly delta,
            # and the reversal that puts M in its correct place
            # leads to the array "smallarr" which had cost C-delta
            # by the correctness of recursion,
            # so that the total cost is C, as desired:

            ans = " ".join(newarr[:delta][::-1] + newarr[delta:])
            return ans


T = int(input())

for case in range(1,T+1):
    
    N, C = list(map(int,input().strip().split()))
    
    if C < N-1 or C > N*(N+1)/2 - 1:        
        # If C is not within the appropriate bounds, 
        # reject immediately:
        print("Case #" + str(case) + ": IMPOSSIBLE")
    else:
        
        # Otheriwse, invoke the recursive mechanism
        # for constructing an array with the appropriate cost:
        A = construct(N,C,1)
        print("Case #" + str(case) + ": " + A)
 /** 
INPUT

5
4 6
2 1
7 12
7 2
2 1000

OUTPUT

Case #1: 1 3 4 2
Case #2: 1 2
Case #3: 1 2 3 5 7 6 4
Case #4: IMPOSSIBLE
Case #5: IMPOSSIBLE

 **/
